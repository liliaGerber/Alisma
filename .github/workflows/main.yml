# .github/workflows/deploy-strato.yml
name: Deploy SSH STRATO

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-strato-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [22.16.0]
    environment: strato_deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        env:
          VITE_EMAILJS_PUBLIC_KEY: ${{ vars.VITE_EMAILJS_PUBLIC_KEY }}
          VITE_EMAILJS_SERVICE_ID: ${{ vars.VITE_EMAILJS_SERVICE_ID }}
          VITE_EMAILJS_TEMPLATE_ID: ${{ vars.VITE_EMAILJS_TEMPLATE_ID }}
        run: pnpm build

      # Write a build marker we can fetch over HTTP to confirm fresh deploy
      - name: Stamp build id
        run: echo "$GITHUB_SHA" > dist/__build_id.txt

      - name: Install lftp
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install lftp
      # Prefer "/" first because your domain's docroot is fixed to root.

      - name: Ensure remote dir exists (skip for /)
        env:
          STRATO_SSH_HOST: ${{ secrets.STRATO_SSH_HOST }}
          STRATO_SSH_USER: ${{ secrets.STRATO_SSH_USER }}
          STRATO_SSH_PASS: ${{ secrets.STRATO_SSH_PASS }}
          REMOTE_DIR: "/alisma"
        run: |
          if [ "$REMOTE_DIR" = "/" ]; then
            echo "Docroot is '/', skipping mkdir."
          else
            lftp -u "$STRATO_SSH_USER","$STRATO_SSH_PASS" sftp://$STRATO_SSH_HOST -e "
              set cmd:fail-exit yes; set net:timeout 8; set net:max-retries 1; set sftp:auto-confirm yes;
              mkdir -p $REMOTE_DIR; bye
            "
          fi
      - name: Pre-deploy listing
        env:
          STRATO_SSH_HOST: ${{ secrets.STRATO_SSH_HOST }}
          STRATO_SSH_USER: ${{ secrets.STRATO_SSH_USER }}
          STRATO_SSH_PASS: ${{ secrets.STRATO_SSH_PASS }}
          REMOTE_DIR: "/alisma"
        run: |
          lftp -u "$STRATO_SSH_USER","$STRATO_SSH_PASS" sftp://$STRATO_SSH_HOST -e "
            set cmd:fail-exit yes; set net:timeout 8; set net:max-retries 1; set sftp:auto-confirm yes;
            cls -al $REMOTE_DIR; bye
          "
      - name: Deploy via SFTP (force overwrite)
        uses: pressidium/lftp-mirror-action@v1
        with:
          host: ${{ secrets.STRATO_SSH_HOST }}
          port: 22
          user: ${{ secrets.STRATO_SSH_USER }}
          pass: ${{ secrets.STRATO_SSH_PASS }}
          onlyNewer: false
          settings: 'sftp:auto-confirm=yes; net:timeout=8; net:max-retries=1; cmd:fail-exit=yes'
          localDir: 'dist/'
          remoteDir: "/alisma"
          reverse: true
          options: '--delete --verbose --ignore-time --overwrite --exclude-glob temp --exclude-glob temp/**'

      - name: Post-deploy listing
        env:
          STRATO_SSH_HOST: ${{ secrets.STRATO_SSH_HOST }}
          STRATO_SSH_USER: ${{ secrets.STRATO_SSH_USER }}
          STRATO_SSH_PASS: ${{ secrets.STRATO_SSH_PASS }}
          REMOTE_DIR: "/alisma"
        run: |
          lftp -u "$STRATO_SSH_USER","$STRATO_SSH_PASS" sftp://$STRATO_SSH_HOST -e "
            set cmd:fail-exit yes; set net:timeout 8; set net:max-retries 1; set sftp:auto-confirm yes;
            cls -al $REMOTE_DIR; bye
          "
      - name: HTTP check live content
        run: |
          set -e
          echo "Apex:"
          curl -fsS https://alisma.at/__build_id.txt | head -c 12 && echo
          echo "WWW:"
          curl -fsS https://www.alisma.at/__build_id.txt | head -c 12 && echo || true
